name: CI/CD for Flask Chat Application

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        # Install numpy first as specified in Dockerfile
        pip install numpy>=1.24.0
        pip install -r requirements.txt
    
    - name: Download NLTK Data
      run: |
        python -c "
        import nltk
        import os
        nltk.data.path.append(os.getcwd() + '/nltk_data')
        nltk.download('punkt', download_dir='nltk_data')
        "
    
    - name: Run tests
      run: |
        pytest

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Cache pip packages for security scan
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-security-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-security-pip-
    
    - name: Install dependencies for security scan
      run: |
        python -m pip install --upgrade pip
        # Install numpy first as specified in Dockerfile
        pip install numpy>=1.24.0
        pip install -r requirements.txt
    
    - name: Run Snyk to check for vulnerabilities
      uses: snyk/actions/python@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high
      continue-on-error: true  # Optional: continue even if vulnerabilities are found

  build-and-push:
    needs: [test, security-scan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Build and push
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./DockerFile
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/flask-chat:latest
          ${{ secrets.DOCKER_USERNAME }}/flask-chat:${{ github.sha }}
        cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/flask-chat:buildcache
        cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/flask-chat:buildcache,mode=max
    
    - name: Image digest
      run: echo ${{ steps.docker_build.outputs.digest }}